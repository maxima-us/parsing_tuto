
type strnum = string wrap <ocaml t="Float.t" wrap="Float.of_string" unwrap="Float.to_string">
(* <ocaml valid = "fun s -> float_of_string s > 0."> *)


(* ============================================================ *)
(* INSTRUMENT *)
(* ============================================================ *)


type expected_instrument = { 
      ask <json name = "a">: (strnum * strnum * strnum)
    ; bid <json name = "b">: (strnum * strnum * strnum)
    ; last <json name = "c">: (strnum * strnum)
    ; vol <json name = "v">: (strnum * strnum)
    ; vwap <json name = "p">: (strnum * strnum)
    ; trades <json name = "t">: (int * int)
    ; low <json name = "l">: (strnum * strnum)
    ; high <json name = "h">: (strnum * strnum)
    ; o <json name = "o">: strnum
}




(* ============================================================ *)
(* OHLC *)
(* ============================================================ *)


type ohlc_item = (int * strnum * strnum * strnum * strnum * strnum * strnum * int)

type expected_ohlc = ohlc_item list




(* ============================================================ *)
(* ORDERBOOK *)
(* ============================================================ *)


type ask_item = (strnum * strnum * int)
type bid_item = (strnum * strnum * int)

type expected_ask_list = ask_item list
type expected_bid_list = bid_item list


type expected_orderbook = {
  asks: expected_ask_list
  ; bids: expected_bid_list
}




(* ============================================================ *)
(* TRADES *)
(* ============================================================ *)


(* SAMPLE RESPONSE
{
  "XXBTZUSD":[
    ["8943.10000","0.01000000",1588710118.4965,"b","m",""],
    ["8943.10000","4.52724239",1588710118.4975,"b","m",""],
    ["8941.10000","0.04000000",1588710129.8625,"b","m",""],
  ],
  "last":"1588712775751709062"
} *)

(* type oSide = B | S
type oType = M | L *)

(* //TODO type oSide and oType *)

type trade_item = (strnum * strnum * float * string * string * string)

type expected_trades = trade_item list



(* ============================================================ *) 
(* SYMBOLS *)
(* ============================================================ *) 


(* SAMPLE RESPONSE *)

(* (example of one key, full response is dict)
  "ADAETH":{
    "altname":"ADAETH",
    "wsname":"ADA\\/ETH",
    "aclass_base":"currency",
    "base":"ADA",
    "aclass_quote":"currency",
    "quote":"XETH",
    "lot":"unit",
    "pair_decimals":7,
    "lot_decimals":8,
    "lot_multiplier":1,
    "leverage_buy":[2,3],
    "leverage_sell":[2,3],
    "fees":[[0,0.26],[50000,0.24],[100000,0.22],[250000,0.2],[500000,0.18],[1000000,0.16],[2500000,0.14],[5000000,0.12],[10000000,0.1]],
    "fees_maker":[[0,0.16],[50000,0.14],[100000,0.12],[250000,0.1],[500000,0.08],[1000000,0.06],[2500000,0.04],[5000000,0.02],[10000000,0]],
    "fee_volume_currency":"ZUSD",
    "margin_call":80,
    "margin_stop":40,
    "ordermin":"50"
  } *)


type fee_item = (int * float)

type symbol_item = {
  ~altname: string
  ; ~wsname : string
  ; ~aclass_base: string
  ; ~base: string
  ; ~aclass_quote: string
  ; ~quote: string
  ; ~lot: string
  ; ~pair_decimals: int
  ; ~lot_decimals: int
  ; ~lot_multiplier: int
  ; ~leverage_buy: int list
  ; ~leverage_sell: int list
  ; ~fees: fee_item list
  ; ~fees_maker: fee_item list
  ; ~fee_volume_currency: string
  ; ~margin_call: int
  ; ~margin_stop: int
  ; ?ordermin: string option
}

(* https://atd.readthedocs.io/en/latest/atdgen.html#association-lists *)

type expected_symbols = (string * symbol_item) list <json repr="object">